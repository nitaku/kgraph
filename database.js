// Generated by CoffeeScript 1.12.4
(function() {
  var Promise, db, neo4j;

  neo4j = require('neo4j');

  db = new neo4j.GraphDatabase('http://neo4j:c25a2017@localhost:7474');

  Promise = require('bluebird');

  db = Promise.promisifyAll(db);

  module.exports = {
    update_subgraph: function(graph, callback) {
      var tx;
      tx = Promise.promisifyAll(db.beginTransaction());
      return tx.cypherAsync({
        query: 'MATCH (:META:Source {id: {id}})-[r:CREATED]->(n:Info) OPTIONAL MATCH (n)-[r2]-(:Info) DELETE r,r2,n',
        params: {
          id: graph.id
        }
      }).then(function() {
        return tx.cypherAsync({
          query: "MERGE (:META:Source {id: {id}})",
          params: {
            id: graph.id
          }
        });
      }).then(function() {
        graph.nodes.forEach(function(d) {
          return d.id = graph.id + '|' + d.id;
        });
        return tx.cypherAsync({
          query: "WITH {nodes} AS nodes MATCH (s:META:Source {id: {id}}) UNWIND nodes AS n CREATE (s)-[r:CREATED]->(x:Info) SET x += n",
          params: {
            nodes: graph.nodes,
            id: graph.id
          }
        });
      }).then(function() {
        graph.links.forEach(function(d) {
          d.source = graph.id + '|' + d.source;
          return d.target = graph.id + '|' + d.target;
        });
        return tx.cypherAsync({
          query: "WITH {links} AS links UNWIND links AS l MATCH (:META:Source {id: {id}})-[:CREATED]->(s:Info {id: l.source}), (:META:Source {id: {id}})-[:CREATED]->(t:Info {id: l.target}) CREATE (s)-[r:INTERNAL]->(t) SET r += l REMOVE r.source REMOVE r.target",
          params: {
            links: graph.links,
            id: graph.id
          }
        });
      }).then(function() {
        return tx.commitAsync();
      }).then(function() {
        return callback();
      });
    }
  };

}).call(this);
